#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_PRODUCTS 50000  // Número máximo de produtos
#define MAX_NAME_LENGTH 50  // Tamanho máximo do nome do produto

// Estrutura que representa um produto no e-commerce
typedef struct {
    int id;                      // ID único do produto
    char name[MAX_NAME_LENGTH];  // Nome do produto
    float price;                 // Preço do produto
} Product;

// Lista de nomes de produtos reais para e-commerce
const char *productNames[] = {
    "Smartphone Samsung Galaxy", "Notebook Dell Inspiron", "Geladeira Brastemp Frost Free", 
    "Cafeteira Nespresso", "Fritadeira Airfryer Mondial", "TV LED 50 Polegadas LG",
    "Console Playstation 5", "Headset Gamer HyperX", "Máquina de Lavar Electrolux", 
    "Ventilador Arno Turbo", "Teclado Mecânico Razer", "Impressora Multifuncional HP",
    "Relógio Smartwatch Apple", "Câmera DSLR Canon", "Micro-ondas Panasonic", 
    "Bicicleta Caloi Aro 29", "Perfume Chanel No 5", "Sapato Social Masculino",
    "Bolsa Feminina de Couro", "Óculos de Sol Ray-Ban"
};

// Função para gerar um nome de produto aleatório a partir da lista predefinida
void generateProductName(char *name) {
    int index = rand() % (sizeof(productNames) / sizeof(productNames[0]));
    strncpy(name, productNames[index], MAX_NAME_LENGTH - 1);
    name[MAX_NAME_LENGTH - 1] = '\0';
}

// Função para gerar uma lista de produtos com preços aleatórios
void generateProductList(Product products[], int numProducts) {
    for (int i = 0; i < numProducts; ++i) {
        products[i].id = i + 1;
        generateProductName(products[i].name);
        products[i].price = (rand() % 10000) / 100.0; // Preço aleatório entre $0 e $100
    }
}

// Função para imprimir um produto
void printProduct(Product product) {
    printf("ID: %d, Nome: %s, Preço: $%.2f\n", product.id, product.name, product.price);
}

// Função para imprimir a lista de produtos
void printProductList(Product products[], int numProducts) {
    printf("\nLista de produtos gerados:\n");
    for (int i = 0; i < numProducts; ++i) {
        printProduct(products[i]);
    }
}

// Implementação de busca sequencial
int sequentialSearch(Product products[], int numProducts, const char* target) {
    for (int i = 0; i < numProducts; ++i) {
        if (strcmp(target, products[i].name) == 0) {
            return i;
        }
    }
    return -1; // Produto não encontrado
}

// Implementação de busca binária
int binarySearch(Product products[], int low, int high, const char* target) {
    if (low <= high) {
        int mid = (low + high) / 2;
        int cmp = strcmp(target, products[mid].name);
        if (cmp == 0)
            return mid;
        else if (cmp > 0)
            return binarySearch(products, mid + 1, high, target);
        else
            return binarySearch(products, low, mid - 1, target);
    }
    return -1; // Produto não encontrado
}

// Função para comparar produtos por nome para ordenação
int compareByName(const void* a, const void* b) {
    Product* productA = (Product*)a;
    Product* productB = (Product*)b;
    return strcmp(productA->name, productB->name);
}


// Função principal
int main() {
    srand(time(NULL)); // Inicializa a semente para geração de números aleatórios
    clock_t start, end;
    Product products[MAX_PRODUCTS]; // Array de produtos
    int numProducts = MAX_PRODUCTS; // Quantidade de produtos a serem gerados
    
    // Gera a lista de produtos
    generateProductList(products, numProducts);
    
    // Imprime a lista de produtos
    printProductList(products, 10); // Exibe apenas os 10 primeiros produtos

    // Define o produto alvo para busca
    char target[MAX_NAME_LENGTH] = "Máquina de Lavar Electrolux";

    // Realiza a busca sequencial e mede o tempo
    printf("\nBusca sequencial pelo produto '%s':\n", target);
    clock_t startseq = clock();
    int seqResult = sequentialSearch(products, numProducts, target);
    clock_t endseq = clock();
    double cpu_time_used = ((double) (endseq - startseq)) * 1000 / CLOCKS_PER_SEC;
    
    if (seqResult != -1) {
        printf("Produto encontrado na posição %d:\n", seqResult);
        printProduct(products[seqResult]);
    } else {
        printf("Produto não encontrado na busca sequencial.\n");
    }
    printf("Tempo de execução da busca sequencial: %.5f segundos\n", cpu_time_used);

    // Ordena a lista de produtos por nome usando qsort
    qsort(products, numProducts, sizeof(Product), compareByName);

    // Realiza a busca binária e mede o tempo
    printf("\nBusca binária pelo produto '%s':\n", target);
    clock_t startbin = clock();
    int binResult = binarySearch(products, 0, numProducts - 1, target);
    clock_t endbin = clock();
    double cpubin_time_used = ((double) (endbin - startbin)) * 1000 / CLOCKS_PER_SEC;end = clock();

    if (binResult != -1) {
        printf("Produto encontrado na posição %d:\n", binResult);
        printProduct(products[binResult]);
    } else {
        printf("Produto não encontrado na busca binária.\n");
    }
        printf("Tempo de execução da busca binária: %.5f segundos\n", cpubin_time_used);

    return 0;
}
