/*
O código abaixo apresenta a implementação de uma pilha e suas operações básicas.

1 - comente o código
2 - implemente uma função para verificar se a pilha está vazia.
3 - proponha uma função que possa fazer expansão dinâmica quando a capacidade máxima é atingida, em vez de simplesmente negar novas inserções na pilha.
*/

#include <stdio.h>
#include <stdlib.h> 

#define INITIAL_SIZE 3 

int* pilha;   
int topo = -1;
int capacidade = INITIAL_SIZE;


void push(int elemento) {
    if (topo < capacidade - 1) { 
        pilha[++topo] = elemento; 
    } else {
        printf("Capacidade máxima atingida. Expandindo a pilha...\n");
        capacidade += 1; //aumenta a capacidade da pilha em uma unidade
        pilha = realloc(pilha, capacidade * sizeof(int)); 
        if (pilha != NULL) {
            pilha[++topo] = elemento; 
        } else {
            printf("Erro ao expandir a pilha!\n");
            exit(1); 
        }
    }
}


int pop() {
    if (topo == -1) { 
        printf("Pilha vazia!\n");
        return -1; 
    } else {
        return pilha[topo--]; 
    }
}


int top() {
    if (topo == -1) { 
        printf("Pilha vazia!\n");
        return -1;
    } else {
        return pilha[topo]; 
    }
}


void imprimir() {
    printf("Conteúdo da pilha:\n");
    for (int i = topo; i >= 0; i--) { 
        printf("%d ", pilha[i]);
    }
    printf("\n");
}


int isEmpty() {
    return topo == -1; //verifica se a pilha está vazia
}

int main() {
    pilha = (int*)malloc(capacidade * sizeof(int)); 
    if (pilha == NULL) { 
        printf("Erro ao alocar memória para a pilha!\n");
        return 1;
    }

    push(10); 
    push(20); 
    push(30); 
    imprimir(); 
    
    printf("Elemento no topo: %d\n", top()); 
    
    printf("Elemento removido: %d\n", pop()); 
   
    push(40);
    imprimir();
    push(50); 
    push(60);
    imprimir();
    
    free(pilha);

    return 0;
}
